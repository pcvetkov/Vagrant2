
1. Прописываем  публичный ключ из основного хоста -в гостевой хост вагранта - чтобы можно было ходить пользователем vagrant по ключу без пароля

[vagrant@nginx .ssh]$ vi authorized_keys 
[vagrant@nginx .ssh]$ logout
Connection to 127.0.0.1 closed.

2. Проверяем работу ansible

pnrusr@astra:~/Ansible$ ansible nginx -i staging/hosts -m ping
nginx | SUCCESS => {
    "changed": false,
    "ping": "pong"
}


3. Создаем конфигурационный файл ansible.cfg и запускаем скрипты

pnrusr@astra:~/Ansible$ vi ansible.cfg

3.1 Проверка уровня ядра

pnrusr@astra:~/Ansible$ ansible nginx -m command -a "uname -r"
nginx | CHANGED | rc=0 >>
3.10.0-1127.el7.x86_64


3.2 Проверка статуса firewalld

pnrusr@astra:~/Ansible$ ansible nginx -m systemd -a name=firewalld
nginx | SUCCESS => {
    "changed": false,
    "name": "firewalld",
    "status": {
        "ActiveEnterTimestampMonotonic": "0",
        "ActiveExitTimestampMonotonic": "0",
        .........................................
        "WatchdogUSec": "0"
    }
}


4. Устанавливаем пакет epel

ansible nginx -m yum -a "name=epel-release state=present" -b

Но он был установлен уже раньше. Поэтому

pnrusr@astra:~/Ansible$ ansible nginx -m yum -a "name=epel-release state=present" -b
nginx | SUCCESS => {
    "ansible_facts": {
        "pkg_mgr": "yum"
    },
    "changed": false,
    "msg": "",
    "rc": 0,
    "results": [
        "epel-release-7-11.noarch providing epel-release is already installed"
    ]
}


5.  Прописываем в  /etc/hosts
192.168.11.150  nginx

Создаем playbook epel.yml  :


---
- name: Install EPEL Repo
  hosts: nginx
  become: true
  tasks:
    - name: Install EPEL Repo package from standart repo
      yum:
        name: epel-release
        state: present

И запускаем playbook

pnrusr@astra:~/Ansible$ ansible-playbook  epel.yml 

PLAY [Install EPEL Repo] **************************************************************************************

TASK [Gathering Facts] ****************************************************************************************
ok: [nginx]

TASK [Install EPEL Repo package from standart repo] ***********************************************************
ok: [nginx]

PLAY RECAP ****************************************************************************************************
nginx                      : ok=2    changed=0    unreachable=0    failed=0   


6. Убираем установленный пакет epel

ansible nginx -m yum -a "name=epel-release state=absent" -b,

nginx | CHANGED => {
    "ansible_facts": {
        "pkg_mgr": "yum"
    },
    "changed": true,
    "msg": "",
    "rc": 0,
    "results": [
        "Loaded plugins: fastestmirror\nResolving Dependencies\n--> Running transaction check\n---> Package epel-release.noarch 0:7-11 will be erased\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package                Arch             Version        Repository         Size\n================================================================================\nRemoving:\n epel-release           noarch           7-11           @extras            24 k\n\nTransaction Summary\n================================================================================\nRemove  1 Package\n\nInstalled size: 24 k\nDownloading packages:\nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Erasing    : epel-release-7-11.noarch                                     1/1 \n  Verifying  : epel-release-7-11.noarch                                     1/1 \n\nRemoved:\n  epel-release.noarch 0:7-11                                                    \n\nComplete!\n"
    ]
}

7.  Cтавим пакет при помощи playbook

pnrusr@astra:~/Ansible$ ansible-playbook  epel.yml 

PLAY [Install EPEL Repo] **************************************************************************************

TASK [Gathering Facts] ****************************************************************************************
ok: [nginx]

TASK [Install EPEL Repo package from standart repo] ***********************************************************
changed: [nginx]

PLAY RECAP ****************************************************************************************************
nginx                      : ok=2    changed=1    unreachable=0    failed=0





8. Создаем на основе предыдущего Playbook  новый  - nginx.yml

Добавляем туда раздел tags  и смотрим, какие у него они есть:

pnrusr@astra:~/Ansible$ ansible-playbook  nginx.yml --list-tags 

playbook: nginx.yml

  play #1 (nginx): NGINX | Install and configure NGINX  TAGS: []
      TASK TAGS: [epel-package, nginx-package, packages]

      
      
9. Запустим тег по установке nginx-package

ansible-playbook nginx.yml -t nginx-package

playbook: nginx.yml

  play #1 (nginx): NGINX | Install and configure NGINX  TAGS: []
      TASK TAGS: [epel-package, nginx-package, packages]
pnrusr@astra:~/Ansible$ ansible-playbook nginx.yml -t nginx-package

PLAY [NGINX | Install and configure NGINX] ********************************************************************

TASK [Gathering Facts] ****************************************************************************************
ok: [nginx]

TASK [NGINX | Install NGINX package from EPEL Repo] ***********************************************************
changed: [nginx]

PLAY RECAP ****************************************************************************************************
nginx                      : ok=2    changed=1    unreachable=0    failed=0


10. Теперь задача усложняется:  необходимо создать конфигурационный файл  nginx  на основе образца -
   то есть  template.
     В  template  используется переменная  var,  которая создается в основном файле и указывает в нашем
случае на порт,  который будет использоваться в конфигурации  nginx



    Полный текст скрипта выглядит следующим образом :


---
- name: NGINX | Install and configure NGINX
  hosts: nginx
  become: true
  vars:
    nginx_listen_port: 8080
  tasks:
    - name: NGINX | Install EPEL Repo package from standart repo
      yum:
        name: epel-release
        state: present
      tags:
        - epel-package
        - packages
    - name: NGINX | Install NGINX package from EPEL Repo
      yum:
        name: nginx
        state: latest
      notify:
        - restart nginx
      tags:
        - nginx-package
        - packages
    - name: NGINX | Create NGINX config file from template
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify:
        - reload nginx
      tags:
        - nginx-configuration
  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded
 

   

11. Поскольку в процессе работы над ДЗ  мне пришлось искать ошибки в работе скрипты, я  протестировал полученный YAML-файл с помощью проверочного сайта

https://www.yamllint.com/


После исправления ошибок запустил снова.

12.  Запускаем плейбук.



pnrusr@ubun:~/Ansible$ ansible-playbook  nginx.yml

PLAY [NGINX | Install and configure NGINX] *************************************

TASK [Gathering Facts] *********************************************************
ok: [nginx]

TASK [NGINX | Install EPEL Repo package from standart repo] ********************
changed: [nginx]

TASK [NGINX | Install NGINX package from EPEL Repo] ****************************
changed: [nginx]

TASK [NGINX | Create NGINX config file from template] **************************
changed: [nginx]

RUNNING HANDLER [restart nginx] ************************************************
changed: [nginx]

RUNNING HANDLER [reload nginx] *************************************************
changed: [nginx]

PLAY RECAP *********************************************************************
nginx                      : ok=6    changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   




13.  Итоговая проверка

nrusr@ubun:~/Ansible$ curl 192.168.56.150:8080
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Welcome to CentOS</title>
  <style rel="stylesheet" type="text/css"> 

	html {
	background-image:url(img/html-background.png);
	background-color: white;
	font-family: "DejaVu Sans", "Liberation Sans", sans-serif;
	font-size: 0.85em;
	line-height: 1.25em;
	margin: 0 4% 0 4%;
	}

	body {
	border: 10px solid #fff;
	margin:0;
	padding:0;
	background: #fff;
	}

	/* Links */

	a:link { border-bottom: 1px dotted #ccc; text-decoration: none; color: #204d92; }
	a:hover { border-bottom:1px dotted #ccc; text-decoration: underline; color: green; }
	a:active {  border-bottom:1px dotted #ccc; text-decoration: underline; color: #204d92; }
	a:visited { border-bottom:1px dotted #ccc; text-decoration: none; color: #204d92; }
	a:visited:hover { border-bottom:1px dotted #ccc; text-decoration: underline; color: green; }
 
	.logo a:link,
	.logo a:hover,
	.logo a:visited { border-bottom: none; }

	.mainlinks a:link { border-bottom: 1px dotted #ddd; text-decoration: none; color: #eee; }
	.mainlinks a:hover { border-bottom:1px dotted #ddd; text-decoration: underline; color: white; }
	.mainlinks a:active { border-bottom:1px dotted #ddd; text-decoration: underline; color: white; }
	.mainlinks a:visited { border-bottom:1px dotted #ddd; text-decoration: none; color: white; }
	.mainlinks a:visited:hover { border-bottom:1px dotted #ddd; text-decoration: underline; color: white; }

	/* User interface styles */

